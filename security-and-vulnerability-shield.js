(function($) {
    var generateGenericMessage = function(type, identifier, msg) {
        $('.sitecops-nag-id-' + identifier).remove();
        var $element = $('<div class="update-nag sitecops-nag sitecops-nag-' + type + ' sitecops-nag-id-' + identifier + '">' + msg + '</div>');
        $element.hide();
        $('.wrap:first').prepend(
            $element
        );
        $element.fadeIn();
    };

    window.siteCopsProcessPluginsData = function(r) {
        // fix all empty data-slugs
        $('tr[data-slug=""]').each(function() {
            $(this).attr('data-slug', $(this).attr('id'))
        });

        // render
        if($.isPlainObject(r.response)) {
            if(r.response.error) {

            } else {
                Object.keys(r.response).forEach(function (k) {
                    var v = r.response[k];
                    if (v === true) {
                        if (k === "wordpress") {
                            generateGenericMessage(
                                'error',
                                'wp',
                                'You are using WordPress v' + r.request.wp + ' which is vulnerable. <a href="./update-core.php">Please update now</a>.'
                            );
                        } else {
                            flagPluginAsVunlerable(k, r);
                        }
                    } else {
                        flagPluginAsOk(k, r);
                    }
                });
            }
        }
        if(r.response.error) {
            var lastUpdatedMsg = "";
            if(siteCopsAjax && siteCopsAjax.plugin_data && siteCopsAjax.plugin_data.last_updated_datestr) {
                lastUpdatedMsg = " (last updated: " + siteCopsAjax.plugin_data.last_updated_datestr + ")";
            }
            generateGenericMessage(
                'warn',
                'limit',
                'You had reached the maximum scans per day (10). Please try again later' + lastUpdatedMsg + "."
            );
        }
        if(r && r.ctime && r.last_updated && !r.response.error) {
            if(r.ctime - r.last_updated > 10 * 24 * 60 * 60) {
                generateGenericMessage(
                    'warn',
                    'wp',
                    'The last time that you had scanned your plugins was more then 10 days ago. Please click "Scan" to check your plugins for new vulnerabilities.'
                );
            }
        }
    };

    var flagPluginAsVunlerable = function(identifier, r) {
        var $container = $('tr[data-slug="' + identifier + '"]:not(.plugin-update-tr)')
            .addClass('update')
            .addClass('sitecops-vulnerable');

        $('.sitecops-' + identifier).remove();

        var classes = $container.attr('class') + ' sitecops-flag sitecops-vulnerable sitecops-' + identifier +'';

        var $vulnerableElement = $('<tr class="' + classes + '">' +
            '<td colspan="3" class="plugin-update colspanchange">' +
            '<div class="update-message"></div>' +
            '</td>' +
            '</tr>');

        $('.update-message', $vulnerableElement)
            .text(
            'SiteCops Plugins Protect have information for vulnerability affecting ' +
            $('.plugin-title strong', $container).text() + ' v' +
            r.request.plugins[identifier].v +
            '. Please update or remove (delete) this plugin as soon as possible!'
        );
        $vulnerableElement.hide();
        $container.after($vulnerableElement);
        $vulnerableElement
            .fadeIn();

        $('.sitecops-vulnerable').addClass(
            'sitecops-fade-in-out-loop-animation'
        );
    };
    var flagPluginAsOk = function(identifier, r) {
        var $container = $('tr[data-slug="' + identifier + '"]:not(.plugin-update-tr)')
            .addClass('sitecops-ok');

        $('.sitecops-' + identifier).remove();

        var classes = $container.attr('class') + ' sitecops-flag sitecops-ok sitecops-' + identifier;

        var $vulnerableElement = $('<tr class="' + classes + '">' +
            '<td colspan="3" class="plugin-update colspanchange">' +
                '<div class="update-message"></div>' +
            '</td>' +
        '</tr>');

        $('.update-message', $vulnerableElement)
            .text(
                'SiteCops Plugins Protect have no information for vulnerabilities affecting ' +
                $('.plugin-title strong', $container).text() + '' +
                (r.request.plugins[identifier] ? " v" + r.request.plugins[identifier].v : "") +
                '.'
            );

        $vulnerableElement.hide();
        $container.after($vulnerableElement);
        $vulnerableElement.fadeIn();
    };

    $(document).ready(function() {
        var $addNewButton = $('.add-new-h2, .page-title-action');
        var $scanButton = $addNewButton.clone();
        $scanButton.addClass('sitecops-scan-plugins-button');
        $scanButton.text('Scan');
        $scanButton.prepend(
            '<i></i>'
        );

        $scanButton.attr('href', '');

        if(siteCopsAjax && siteCopsAjax.plugin_data && siteCopsAjax.plugin_data.last_updated_datestr) {
            $scanButton.attr('title', 'Last scanned via SiteCops: ' + siteCopsAjax.plugin_data.last_updated_datestr);
        }

        $scanButton.bind('click', function(e) {
            var data = {
                'action': 'sitecops_scan_plugins',
                '_wpnonce_name': siteCopsAjax.ajax_nonce
            };
            // We can also pass the url value separately from ajaxurl for front end AJAX implementations
            jQuery.post(siteCopsAjax.ajax_url, data, function(r) {
                if(r) {
                    window.siteCopsProcessPluginsData(r);
                } else {
                    // failed msg
                }
            });

            e.stopPropagation();
            return false;
        });

        $addNewButton.after($scanButton);

        if(siteCopsAjax.plugin_data) {
            siteCopsProcessPluginsData(siteCopsAjax.plugin_data);
        }
    });
})(jQuery);
